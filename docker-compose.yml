services:

  spark:
    build: ./spark
    environment:
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - MONGO_URI=mongodb://mongo:${MONGO_PORT}/
      - CASSANDRA_HOST=${CASSANDRA_HOST}
      - CASSANDRA_PORT=${CASSANDRA_PORT}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
    container_name: ${SPARK_CONTAINER_NAME}
    command: tail -f /dev/null
    volumes:
      - ./spark/app:/app
      - ./spark/data:/data
    depends_on:
      - mongo
    networks:
      - backend

  mongo:
    image: mongo:7
    container_name: ${MONGO_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongodata:/data/db
      - ./mongo/init:/docker-entrypoint-initdb.d
    networks:
      - backend

  cassandra:
    image: cassandra:4.1
    container_name: ${CASSANDRA_CONTAINER_NAME}
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_NUM_TOKENS=16
    ports:
      - "${CASSANDRA_PORT}:${CASSANDRA_PORT}"
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./cassandra/init:/schema-init
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - backend

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: ${API_CONTAINER_NAME}
    ports:
      - "${API_PORT}:${API_PORT}"
    env_file:
      - .env
    depends_on:
      - cassandra
      - redis
    networks:
      - backend

networks:
  backend:

volumes:
  mongodata:
  cassandra_data:
